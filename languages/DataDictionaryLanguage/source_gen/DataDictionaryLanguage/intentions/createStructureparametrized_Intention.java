package DataDictionaryLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class createStructureparametrized_Intention extends AbstractIntentionDescriptor implements IntentionFactory {

  public createStructureparametrized_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:4d078cf1-d580-41b7-bb0b-02a67ad1a7f4(DataDictionaryLanguage.intentions)", "569590123101609480"));
  }

  @Override
  public String getPresentation() {
    return "createStructureparametrized";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<String> paramList = parameter(node, context);
    if (paramList != null) {
      for (String param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<String> parameter(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromListAndArray(new ArrayList<String>(), "AGGREGATION", "SET", "EXCLUSIVE SPECIALIZATION", "NON-EXCLUSIVE SPECIALIZATION");
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private String myParameter;
    public IntentionImplementation(String parameter) {
      myParameter = parameter;
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create structure [" + myParameter + "]";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode nodeStructure = null;
      if (myParameter.equals("AGGREGATION")) {
        nodeStructure = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732faab6c5eL, "DataDictionaryLanguage.structure.Aggregation"));
      }
      if (myParameter.equals("SET")) {
        nodeStructure = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fb0ef7bfL, "DataDictionaryLanguage.structure.Set"));
      }
      if (myParameter.equals("EXCLUSIVE")) {
        nodeStructure = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fb16df4eL, "DataDictionaryLanguage.structure.ExclusiveSpecialization"));
      }
      if (myParameter.equals("NON-EXCLUSIVE")) {
        nodeStructure = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fb191829L, "DataDictionaryLanguage.structure.NonExclusiveSpecialization"));
      }
      if ((nodeStructure != null)) {
        SNode nodeStructureDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732faaeb5dcL, "DataDictionaryLanguage.structure.StructureDefinition"));
        SLinkOperations.setTarget(nodeStructureDefinition, LINKS.structure$jdqJ, nodeStructure);
        SPropertyOperations.assign(nodeStructureDefinition, PROPS.name$MnvL, "generic_name");
        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.structures$NPOC)).addElement(nodeStructureDefinition);
      }
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      return true;
    }



    @Override
    public IntentionDescriptor getDescriptor() {
      return createStructureparametrized_Intention.this;
    }

    public Object getParameter() {
      return myParameter;
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink structure$jdqJ = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732faaeb5dcL, 0x7e79732faaeb5dfL, "structure");
    /*package*/ static final SContainmentLink structures$NPOC = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x6d04cb7a96e885ffL, 0x7e79732faad5e03L, "structures");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
