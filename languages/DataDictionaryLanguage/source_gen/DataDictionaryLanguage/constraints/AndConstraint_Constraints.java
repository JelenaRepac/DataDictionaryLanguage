package DataDictionaryLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeParent;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AndConstraint_Constraints extends BaseConstraintsDescriptor {
  public AndConstraint_Constraints() {
    super(CONCEPTS.AndConstraint$9x);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeParent, Boolean> calculateCanBeParentConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeParent, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeParent context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAParent(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAParent(SNode node, SNode childNode, SAbstractConcept childConcept, SContainmentLink link) {
    if (SNodeOperations.getConcept(SLinkOperations.getTarget(node, LINKS.constraint1$nesd)).equals(CONCEPTS.NotNulConstraint$6m)) {
      if (SNodeOperations.getConcept(SLinkOperations.getTarget(node, LINKS.constraint2$neUf)).equals(CONCEPTS.NotNulConstraint$6m)) {
        return false;
      }
    }
    return true;
  }
  private static final SNodePointer canBeParentBreakingPoint = new SNodePointer("r:4066d16b-36cb-4d72-b0a0-3794d6420eea(DataDictionaryLanguage.constraints)", "1100836963159766808");

  private static final class CONCEPTS {
    /*package*/ static final SConcept AndConstraint$9x = MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0xf46f562b0b348b4L, "DataDictionaryLanguage.structure.AndConstraint");
    /*package*/ static final SConcept NotNulConstraint$6m = MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0xf46f562b0ae69c0L, "DataDictionaryLanguage.structure.NotNulConstraint");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink constraint1$nesd = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0xf46f562b0b348c8L, 0xf46f562b0b348c9L, "constraint1");
    /*package*/ static final SContainmentLink constraint2$neUf = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0xf46f562b0b348c8L, 0xf46f562b0b348cbL, "constraint2");
  }
}
