package DataDictionaryLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class IStructure__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9d91cdL, "DataDictionaryLanguage.structure.IStructure");

  public static final SMethod<Integer> getFieldCount_id1frmgj2KeNS = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("getFieldCount").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1430835183602429176L).languageId(0x9cc2d13247d6555eL, 0x83d7e20faa624554L).build2();
  public static final SMethod<Void> createNewFieldDef_id6ttyxz4A9$r = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("createNewFieldDef").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7448261197722851611L).languageId(0x9cc2d13247d6555eL, 0x83d7e20faa624554L).build2(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> fieldNameAlreadyExist_id6ttyxz4A9A4 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.class)).name("fieldNameAlreadyExist").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7448261197722851716L).languageId(0x9cc2d13247d6555eL, 0x83d7e20faa624554L).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getFieldCount_id1frmgj2KeNS, createNewFieldDef_id6ttyxz4A9$r, fieldNameAlreadyExist_id6ttyxz4A9A4);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static int getFieldCount_id1frmgj2KeNS(@NotNull SNode __thisNode__) {
    int counter = 0;
    {
      Iterator<SNode> e_it = ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elements$GOFf)).iterator();
      SNode e_var;
      while (e_it.hasNext()) {
        e_var = e_it.next();
        if (SNodeOperations.isInstanceOf(e_var, CONCEPTS.Field$_u)) {
          counter++;
        } else {
          counter += (int) IElement__BehaviorDescriptor.getFieldCount_id1frmgj2KeNS.invoke(e_var);
        }
      }
    }
    return counter;
  }
  /*package*/ static void createNewFieldDef_id6ttyxz4A9$r(@NotNull SNode __thisNode__, List<SNode> listFieldDef) {
    for (SNode e : SLinkOperations.getChildren(__thisNode__, LINKS.elements$GOFf)) {
      if (SNodeOperations.isInstanceOf(e, CONCEPTS.Field$_u)) {
        SNode field = ((SNode) e);
        SNode fieldDef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9cedffL, "DataDictionaryLanguage.structure.FieldDefinition"));
        SLinkOperations.setTarget(fieldDef, LINKS.field$NEi$, field);
        SLinkOperations.setTarget(fieldDef, LINKS.domain$Nzv7, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9cee00L, "DataDictionaryLanguage.structure.AbstractDomain")));
        SLinkOperations.setTarget(fieldDef, LINKS.constraint$N$Ec, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9cee07L, "DataDictionaryLanguage.structure.Constraint")));
        ListSequence.fromList(listFieldDef).addElement(fieldDef);
      } else {
        SNode structure = ((SNode) e);
        IElement__BehaviorDescriptor.createNewFieldDef_id6ttyxz4A9$r.invoke(structure, listFieldDef);
      }
    }
  }
  /*package*/ static Boolean fieldNameAlreadyExist_id6ttyxz4A9A4(@NotNull SNode __thisNode__, SNode field) {
    for (SNode e : SLinkOperations.getChildren(__thisNode__, LINKS.elements$GOFf)) {
      if (SNodeOperations.isInstanceOf(e, CONCEPTS.Field$_u)) {
        SNode f1 = ((SNode) e);
        if (f1 != field && SPropertyOperations.getString(f1, PROPS.name$MnvL).equals(SPropertyOperations.getString(field, PROPS.name$MnvL))) {
          return true;
        }
      } else {
        SNode structure = (SNode) e;
        IElement__BehaviorDescriptor.fieldNameAlreadyExist_id6ttyxz4A9A4.invoke(structure, field);
      }
    }
    return false;
  }

  /*package*/ IStructure__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) getFieldCount_id1frmgj2KeNS(node));
      case 1:
        createNewFieldDef_id6ttyxz4A9$r(node, (List<SNode>) parameters[0]);
        return null;
      case 2:
        return (T) ((Boolean) fieldNameAlreadyExist_id6ttyxz4A9A4(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elements$GOFf = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9d91cdL, 0x7e79732fa9d91d0L, "elements");
    /*package*/ static final SReferenceLink field$NEi$ = MetaAdapterFactory.getReferenceLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9cedffL, 0x7e79732fa9cee0dL, "field");
    /*package*/ static final SContainmentLink domain$Nzv7 = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9cedffL, 0x7e79732fa9cee05L, "domain");
    /*package*/ static final SContainmentLink constraint$N$Ec = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9cedffL, 0x7e79732fa9cee0aL, "constraint");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Field$_u = MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9bc605L, "DataDictionaryLanguage.structure.Field");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
