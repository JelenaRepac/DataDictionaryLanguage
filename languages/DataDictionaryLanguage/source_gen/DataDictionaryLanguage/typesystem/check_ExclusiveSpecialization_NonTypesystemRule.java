package DataDictionaryLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class check_ExclusiveSpecialization_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ExclusiveSpecialization_NonTypesystemRule() {
  }
  public void applyRule(final SNode exclusiveSpecialization, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(exclusiveSpecialization, CONCEPTS.ISpecialization$Rd, false, false), LINKS.elements$GOFf)).count() == 1 && SNodeOperations.isInstanceOf(SNodeOperations.getNodeAncestor(exclusiveSpecialization, CONCEPTS.ISpecialization$Rd, false, false), CONCEPTS.ExclusiveSpecialization$NM)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(exclusiveSpecialization, "There are duplicated exclusive specialization structures", "r:84c8e41f-b64d-4d63-b9bb-c3c67b06045b(DataDictionaryLanguage.typesystem)", "569590123102461674", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ExclusiveSpecialization$NM;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept ISpecialization$Rd = MetaAdapterFactory.getInterfaceConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fb12e15bL, "DataDictionaryLanguage.structure.ISpecialization");
    /*package*/ static final SConcept ExclusiveSpecialization$NM = MetaAdapterFactory.getConcept(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fb16df4eL, "DataDictionaryLanguage.structure.ExclusiveSpecialization");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elements$GOFf = MetaAdapterFactory.getContainmentLink(0x83d7e20faa624554L, 0x9cc2d13247d6555eL, 0x7e79732fa9d91cdL, 0x7e79732fa9d91d0L, "elements");
  }
}
